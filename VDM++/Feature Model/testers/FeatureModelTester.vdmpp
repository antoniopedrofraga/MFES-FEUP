class FeatureModelTester
types
			public config = Utilities`config;
			public parentType = Utilities`parentType;					
operations
			private assertTrue: bool ==> ()
                assertTrue(cond) == return
                pre cond;
      private assertFalse: bool ==> ()
                assertFalse(cond) == return
                pre not cond;
                
      -- tests parent type
      -- 1st arg: Parent to be tested
      -- 2nd arg: Type to be tested
      protected testParentType: Parent * parentType ==> ()
      				testParentType(parent, type) == assertTrue(parent.getParentType() = type);
      				
      -- tests mandatory and optional features
      -- 1st arg: Feature to be tested
      -- 2nd arg: Mandatory status 
      protected testMandatoryFeature: Feature * bool ==> ()
      					testMandatoryFeature(feature, isMandatory) == assertTrue(feature.isMandatory() = isMandatory);
      					
      -- tests parents sub features
      -- 1st arg: Parent to be tested
      -- 2nd arg: Expected sub features
      protected testSubFeatures: Parent * seq of Feature ==> ()
      					testSubFeatures(parent, subFeatures) == assertTrue(parent.getSubFeatures() = subFeatures);
      					
      -- tests feature requirements
      -- 1st arg: Feature to be tested
      -- 2nd arg: Expected requirements
      protected testRequirements: Feature * seq of Feature ==> ()
      					testRequirements(feature, requirements) == assertTrue(feature.getRequirements() = requirements);
      
      -- tests feature exclusions
      -- 1st arg: Feature to be tested
      -- 2nd arg: Expected exclusions
      protected testExclusions: Feature * seq of Feature ==> ()
      					testExclusions(feature, exclusions) == assertTrue(feature.getExclusions() = exclusions); 
      									
      -- tests model features count
      -- 1st arg: Model to be tested
      -- 2nd arg: Expected features count
      protected testModelFeaturesCount: Model * nat ==> ()
      					testModelFeaturesCount(model, count) == assertTrue(model.nodeCount() = count);
      					
      -- tests a model valid config
      -- 1st arg: Model to be tested
      -- 2nd arg: Valid config to be tested
      protected validModelConfig: Model * config ==> ()
      					validModelConfig(model, config) == assertTrue(model.isValidConfiguration(config));
      					
      -- tests a model invalid config
      -- 1st arg: Model to be tested
      -- 2nd arg: Invalid config to be tested
      protected invalidModelConfig: Model * config ==> ()
      					invalidModelConfig(model, config) == assertFalse(model.isValidConfiguration(config));
      
      -- tests the valid configs generation of a given model
      -- 1st arg: Model to be tested
      -- 2nd arg: Set of possible configs
      protected testGeneratedValidConfigs: Model * set of config ==> ()
      				 testGeneratedValidConfigs(model, validSet) == 
      				 (
      				 dcl generatedSet : set of config := Utilities`seqToSet(model.generateValidConfigs());
      				 assertTrue(validSet union generatedSet = validSet);
      				 );
      					
      -- tests model root
      -- 1st arg: Model to be tested
      -- 2nd arg: Expected root
      protected testModelRoot: Model * Parent ==> ()
      					testModelRoot(model, root) == assertTrue(model.getRoot() = root); 
      					
     -- INVALID invariants and pre/post conditions
     -- warning: Run one function at a time
      protected testRequirementAndExclusions: () ==> ()
      					testRequirementAndExclusions() ==	
      					(

      						let feature1 = new Feature("feature1"),
      								feature2 = new Feature("feature2") in
      								(feature1.setRequirements([feature2]);
      								feature1.setExclusions([feature2]);
      								);
      								
      					);
      public static main: () ==> ()
                main() ==
                (	
          					dcl eshopModelTester : EshopModelTester := new EshopModelTester();
										dcl mobilePhoneModelTester: MobilePhoneModelTester := new MobilePhoneModelTester();
										dcl carModelTester : CarModelTester := new CarModelTester();
                  	eshopModelTester.testModel();
                  	mobilePhoneModelTester.testModel();
                  	carModelTester.testModel();
                );
end FeatureModelTester