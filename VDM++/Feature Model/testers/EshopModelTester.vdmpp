class EshopModelTester is subclass of FeatureModelTester
instance variables
			eshop : Parent := new Parent("e-shop");
			catalogue : Feature := new Feature("catalogue");
			payment : Parent := new Parent("payment");
			security : Parent := new Parent("security");
			search : Feature := new Feature("search");
			bankTransfer : Feature := new Feature("bank transfer");
			creditCard : Feature := new Feature("credit card");
			high : Feature := new Feature("high");
			standard : Feature := new Feature("standard");
			eshopModel : Model := new Model(eshop);
operations
			public testModel: () ==> ()
                testModel() ==
                (										
											-- Parent type tests
											-- description: Since the default operation is to set the parent as a <defaultParent>, eshop should have the <defaultParent> type
											-- note: Only these 3 Features are Parents (a subclass of Feature)
                			payment.setParentType(<orParent>);
                			security.setParentType(<xorParent>);
                			
                			testParentType(payment, <orParent>);
                			testParentType(security, <xorParent>);
                			testParentType(eshop, <defaultParent>);
                			
                			-- Sub features tests
                			-- description: Each parent should have the respective features as subFeatures
                			payment.setSubFeatures([bankTransfer, creditCard]);
                			security.setSubFeatures([high, standard]);
                			eshop.setSubFeatures([catalogue, payment, security, search]);
                			
                			testSubFeatures(payment, [bankTransfer, creditCard]);
                			testSubFeatures(security, [high, standard]);
                			testSubFeatures(eshop, [catalogue, payment, security, search]);
                			
                			-- Mandatory and optional features tests 
                			-- description: The default operation is to set any feature as mandatory, the "search" and features with xor and or parents should be optional
                			search.setMandatory(false);
                			
                			testMandatoryFeature(eshop, true);
                			testMandatoryFeature(catalogue, true);
                			testMandatoryFeature(payment, true);
                			testMandatoryFeature(security, true);
                			testMandatoryFeature(search, false);
                			testMandatoryFeature(bankTransfer, false);
                			testMandatoryFeature(creditCard, false);
                			testMandatoryFeature(high, false);
                			testMandatoryFeature(standard, false);
                			
                			-- Requirements tests
                			-- description: By default a Feature doesn't have requirements, so only the "creditCard" should have the "high" feature as requirement
                			creditCard.setRequirements([high]);
                			
                			testRequirements(eshop, []);
                			testRequirements(catalogue, []);
                			testRequirements(payment, []);
                			testRequirements(security, []);
                			testRequirements(search, []);
                			testRequirements(bankTransfer, []);
                			testRequirements(creditCard, [high]);
                			testRequirements(high, []);
                			testRequirements(standard, []);
                			
                			-- Exclusions tests
                			-- description: By default a Feature doesn't have exclusions
                					
                			testExclusions(eshop, []);
                			testExclusions(catalogue, []);
                			testExclusions(payment, []);
                			testExclusions(security, []);
                			testExclusions(search, []);
                			testExclusions(bankTransfer, []);
                			testExclusions(creditCard, []);
                			testExclusions(high, []);
                			testExclusions(standard, []);
                			
                			-- Model tests
                			-- description: By default a Feature doesn't have requirements, so only the "creditCard" should have the "high" feature as requirement

                			testModelRoot(eshopModel, eshop);
                			testModelFeaturesCount(eshopModel, 9);
                			validModelConfig(eshopModel, {"e-shop" |-> true, "catalogue" |-> true,
                        						"payment" |-> true, "bank transfer" |-> true, "credit card" |-> false, 
                        						"security" |-> true, "high" |-> true, "standard" |-> false, "search" |-> false });
                      invalidModelConfig(eshopModel, {"e-shop" |-> true, "catalogue" |-> false,
                        						"payment" |-> true, "bank transfer" |-> true, "credit card" |-> false, 
                        						"security" |-> true, "high" |-> true, "standard" |-> true, "search" |-> false });
                			testGeneratedValidConfigs(eshopModel, Utilities`eshopValidConfigs());
                );
end EshopModelTester