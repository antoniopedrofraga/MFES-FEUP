class Feature
types
			public string = Utilities`string;
			public config = Utilities`config;
instance variables
			public name: string;
			protected mandatory: bool := true;
			protected requirements: seq of Feature := [];
			protected exclusions: seq of Feature := [];
operations
			public Feature: string ==> Feature
							Feature(n) == (name := n; return self;)
							pre not n = ""
							post name = n;
			public setOptional: () ==> ()
							setOptional() == mandatory := false;
			public setRequirements: seq of Feature ==> ()
							setRequirements(fs) == requirements := fs;
			public setExclusions: seq of Feature ==> ()
							setExclusions(fs) == exclusions := fs
							post {} = {element | element in seq exclusions & element.mandatory};
			public getName: () ==> string
							getName() == return name;
			public features: () ==> set of string
							features() == return {name};
			public invalidSubsets: () ==> seq of config
							invalidSubsets() == 
							(
							dcl restrictions : seq of config := [];
							if (len requirements + len exclusions > 0) then
							(
									for requirement in requirements do restrictions := restrictions ^ [{name |-> true} munion {requirement.getName() |-> false}];
									for exclusion in exclusions do restrictions := restrictions ^ [{name |-> true} munion {exclusion.getName() |-> true}];
							);
							return restrictions;
			);
			public nodeCount: () ==> int
							nodeCount() == return 1;
			public isMandatory: () ==> bool
							isMandatory() == return mandatory;
			public isRespectingReqAndExc: config ==> bool
							isRespectingReqAndExc(c) == 
							(
							dcl configuredFeatures : set of string := dom (c :> {true});
							for requirement in requirements do 
									if not (requirement.name in set configuredFeatures) then return false;
							for exclusion in exclusions do 
									if (exclusion.name in set configuredFeatures) then return false;
							return true;
							);
			public isValidConfiguration: config ==> bool
							isValidConfiguration(c) == 
							(
							if mandatory and not isNameConfigured(name, c) then return false;
							return isRespectingReqAndExc(c);
							);
functions
			public isNameConfigured: string * config -> bool
			isNameConfigured(n, c) == ({n} <: c = {n |-> true});	
end Feature