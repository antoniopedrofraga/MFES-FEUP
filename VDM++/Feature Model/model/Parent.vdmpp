-- Class Parent, a subclass of Feature
class Parent is subclass of Feature
types
	public parentType = Utilities`parentType;
instance variables
	private subFeatures: set of Feature := {};
	private type: parentType := <defaultParent>;
	
	inv mandatory or optionalHasOptionalSubFeatures(subFeatures);
operations

-- Parent constructor 
-- 1st arg: Name to be associated with the feature
public Parent: string ==> Parent
	Parent(n) == 
	(name := n; return self;)
	post name = n;
				
-- Sets Parent type 
-- 1st arg: Custom type (<defaultParent>, <orParent>, <xorParent>)	
public setParentType: parentType ==> ()
	setParentType(t) ==
	(type := t; if t = <orParent> or t = <xorParent> then setSubFeaturesOptional())
	pre type <> <orParent> and type <> <xorParent>;
				
-- Gets Parent type
-- Return: Current Parent type	
public getParentType: () ==> parentType
	getParentType() == return type;

-- Checks if Parent is a xorParent
-- Return: Boolean with status		
public isXorParent: () ==> bool
	isXorParent() == return type = <xorParent>;
				
-- Checks if Parent is an orParent
-- Return: Boolean with status		
public isOrParent: () ==> bool
	isOrParent() == return type = <orParent>;
				
-- Checks if Parent is a defaultParent
-- Return: Boolean with status		
public isDefaultParent: () ==> bool
	isDefaultParent() == return type = <defaultParent>;
				
-- Sets sub features of parent
-- 1st arg: Set of Features			
public setSubFeatures: set of Feature ==> ()
setSubFeatures(s) == 
(
	subFeatures := s;
	if (type = <orParent> or type = <xorParent>) then
		 setSubFeaturesOptional();
);
				
-- Sets sub features as optional features			
public setSubFeaturesOptional: () ==> ()
	setSubFeaturesOptional() ==
	for all subFeature in set subFeatures do subFeature.setMandatory(false);

-- Gets sub features of a Parent
-- Return: Set of Features			
public getSubFeatures: () ==> set of Feature
	getSubFeatures() == return subFeatures;
				
				
-- Gets sub features name
-- Return: Set of strings			
public getSubFeaturesNames: () ==> set of string
	getSubFeaturesNames() == return {el.getName() | el in set subFeatures};

-- Gets sub features name (all features of this parent sub tree are included)
-- Return: Set of strings	
public features: () ==> set of string
	features() == (dcl parentFeatures : set of string := {name}; 
	for all subFeature in set subFeatures do
			parentFeatures := parentFeatures union subFeature.features();
	return parentFeatures;);
				
-- Gets all invalid subsets of configs associated with this feature (all features of this parent sub tree are included)
-- Return: Set of configs
public invalidSubsets: () ==> set of config
	invalidSubsets() == 
	(
	dcl restrictions : set of config := getReqAndExcRestrictions();
	for all subFeature in set subFeatures do
				restrictions := restrictions union subFeature.invalidSubsets();
	return restrictions;
);

-- Gets sub all invalid subsets of configs associated with this feature (all features of this parent sub tree are included)
-- Return: Integer as child nodes count
public nodeCount: () ==> int
	nodeCount() == (dcl childNodeCount : int := 1; 
				for all subFeature in set subFeatures do
						childNodeCount := childNodeCount + subFeature.nodeCount();
	return childNodeCount;);

-- Checks if a config is valid
-- Return: Boolean with valid status
public isValidConfiguration: config ==> bool
	isValidConfiguration(c) == 
	(
	dcl configuredSubFeatures : int := 0;
	if mandatory and not Utilities`isNameConfigured(name, c) then return false;
	for all subFeature in set subFeatures do
	(
		if (Utilities`isNameConfigured(subFeature.name, c)) then
			configuredSubFeatures := configuredSubFeatures + 1;
		if not subFeature.isValidConfiguration(c) then 
			return false;
	);
	return isRespectingReqAndExc(c) and not
		(type = <orParent> and configuredSubFeatures = 0) and not
		(type = <xorParent> and not configuredSubFeatures = 1);
	);
				
				
pure public optionalSubFeatures: () ==> bool
	optionalSubFeatures() == 
	(
		if mandatory then return true;
		
		for all subFeature in set subFeatures do
		if not subFeature.isOptionalSubFeature() then return false;
		
		return true;
	);

-- Checks if an optional parent has optional sub features
-- 1st arg: Boolean as firstElement (true if its the first element to be checked, false if its not)
-- Return: Boolean with validation status
pure public isOptionalSubFeature: () ==> bool
	isOptionalSubFeature() == 
	(
		for all subFeature in set subFeatures do
			if not subFeature.isOptionalSubFeature() then return false;
								
		if mandatory = false then return true
		else return false;
			 
	);
functions
-- Function get inv status
-- 1st arg: Set of features to be tested
-- Return: Boolean as inv status
public optionalHasOptionalSubFeatures: set of Feature -> bool
	optionalHasOptionalSubFeatures(subFeatures) == 
	(
		not {false} subset {elem.isOptionalSubFeature() | elem in set subFeatures}
	);
end Parent