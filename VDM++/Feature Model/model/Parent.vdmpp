class Parent is subclass of Feature
types
-- TODO
values
-- TODO Define values here
instance variables
			private subFeatures: seq of Feature := [];
			private orParent: bool := false;
			private xorParent: bool := false;
			inv not (orParent and xorParent);
operations
			public Parent: string ==> Parent
			Parent(n) == (name := n; return self;)
			post name = n;
			public setOptional: () ==> ()
			setOptional() == mandatory := false;
			public setXorParent: () ==> ()
			setXorParent() == xorParent := true;
			public setOrParent: () ==> ()
			setOrParent() == orParent := true;
			public setSubFeatures: seq of Feature ==> ()
			setSubFeatures(s) == subFeatures := s;
			public getSubFeatures: () ==> seq of Feature
			getSubFeatures() == return subFeatures;
			public subFeaturesLen: () ==> int
			subFeaturesLen() == return len subFeatures;
			public nodeCount: () ==> int
			nodeCount() == (dcl childNodeCount : int := 1; 
			if (isofclass(Parent, self)) 
					then (
								for subFeature in subFeatures do
										childNodeCount := childNodeCount + subFeature.nodeCount();
					);
			return childNodeCount;)
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Parent