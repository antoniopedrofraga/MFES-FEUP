class Parent is subclass of Feature
types
			public parentType = Utilities`parentType;
instance variables
			private subFeatures: seq of Feature := [];
			private type: parentType := <defaultParent>;
operations
			public Parent: string ==> Parent
							Parent(n) == 
							(name := n; return self;)
							pre not n = ""
							post name = n;
			public setParentType: parentType ==> ()
							setParentType(t) ==
							(type := t; if t = <orParent> or t = <xorParent> then setSubFeaturesOptional())
							pre type <> <orParent> and type <> <xorParent>;
			public getParentType: () ==> parentType
						getParentType() == return type;
			public isXorParent: () ==> bool
							isXorParent() == return type = <xorParent>;
			public isOrParent: () ==> bool
							isOrParent() == return type = <orParent>;
			public isDefaultParent: () ==> bool
							isDefaultParent() == return type = <defaultParent>;
			public setSubFeatures: seq of Feature ==> ()
							setSubFeatures(s) == 
							(
								subFeatures := s;
								if (type = <orParent> or type = <xorParent>) then
									 setSubFeaturesOptional();
							);
			public setSubFeaturesOptional: () ==> ()
							setSubFeaturesOptional() ==
							for subFeature in subFeatures do subFeature.setMandatory(false);
			public getSubFeatures: () ==> seq of Feature
							getSubFeatures() == return subFeatures;
			public getSubFeaturesNames: () ==> set of string
							getSubFeaturesNames() == return {el.getName() | el in seq subFeatures};
			public subFeaturesLen: () ==> int
							subFeaturesLen() == return len subFeatures;
			public features: () ==> set of string
							features() == (dcl parentFeatures : set of string := {name}; 
										for subFeature in subFeatures do
												parentFeatures := parentFeatures union subFeature.features();
							return parentFeatures;);
			public invalidSubsets: () ==> seq of config
							invalidSubsets() == 
							(
							dcl restrictions : seq of config := [];
							if (len requirements + len exclusions > 0) then
							(
									for requirement in requirements do restrictions := restrictions ^ [{name |-> true} munion {requirement.getName() |-> false}];
									for exclusion in exclusions do restrictions := restrictions ^ [{name |-> true} munion {exclusion.getName() |-> true}];
							);
							for subFeature in subFeatures do
										restrictions := restrictions ^ subFeature.invalidSubsets();
							return restrictions;
			);
			public nodeCount: () ==> int
							nodeCount() == (dcl childNodeCount : int := 1; 
										for subFeature in subFeatures do
												childNodeCount := childNodeCount + subFeature.nodeCount();
							return childNodeCount;);
			public isValidConfiguration: config ==> bool
							isValidConfiguration(c) == 
							(
							dcl configuredSubFeatures : int := 0;
							if mandatory and not Utilities`isNameConfigured(name, c) then return false;
							for subFeature in subFeatures do
									(
										if (Utilities`isNameConfigured(subFeature.name, c)) then
													configuredSubFeatures := configuredSubFeatures + 1;
										if not subFeature.isValidConfiguration(c) then 
													return false;
									);
							return isRespectingReqAndExc(c) and not
											(type = <orParent> and configuredSubFeatures = 0) and not
											(type = <xorParent> and not configuredSubFeatures = 1);
							);
end Parent