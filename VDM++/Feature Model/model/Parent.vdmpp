class Parent is subclass of Feature
instance variables
			private subFeatures: seq of Feature := [];
			private orParent: bool := false;
			private xorParent: bool := false;
			inv not (orParent and xorParent);
operations
			public Parent: string ==> Parent
							Parent(n) == (name := n; return self;)
							post name = n;
			public setXorParent: () ==> ()
							setXorParent() == 
							(xorParent := true; if not orParent then setSubFeaturesOptional());
			public setOrParent: () ==> ()
							setOrParent() == 
							(orParent := true; if not xorParent then setSubFeaturesOptional());
			public setSubFeatures: seq of Feature ==> ()
							setSubFeatures(s) == 
							(
								subFeatures := s;
								if (orParent or xorParent) then
									 setSubFeaturesOptional();
							);
			public setSubFeaturesOptional: () ==> ()
							setSubFeaturesOptional() ==
							for subFeature in subFeatures do subFeature.setOptional();
			public getSubFeatures: () ==> seq of Feature
							getSubFeatures() == return subFeatures;
			public subFeaturesLen: () ==> int
							subFeaturesLen() == return len subFeatures;
			public features: () ==> set of string
							features() == (dcl parentFeatures : set of string := {name}; 
										for subFeature in subFeatures do
												parentFeatures := parentFeatures union subFeature.features();
							return parentFeatures;);
			public nodeCount: () ==> int
							nodeCount() == (dcl childNodeCount : int := 1; 
										for subFeature in subFeatures do
												childNodeCount := childNodeCount + subFeature.nodeCount();
							return childNodeCount;);
			public isValidConfiguration: config ==> bool
							isValidConfiguration(c) == 
							(
							dcl configuredSubFeatures : int := 0;
							if mandatory and not isNameConfigured(name, c) then return false;
							for subFeature in subFeatures do
									(
										if (isNameConfigured(subFeature.name, c)) then
													configuredSubFeatures := configuredSubFeatures + 1;
										if not subFeature.isValidConfiguration(c) then 
													return false;
									);
							if (orParent and configuredSubFeatures = 0) then return false;
							if (xorParent and not configuredSubFeatures = 1) then return false;
							return isRespectingReqAndExc(c);
							);
end Parent