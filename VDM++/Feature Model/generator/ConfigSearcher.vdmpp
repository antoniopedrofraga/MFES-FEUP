-- ConfigSearcher Class
class ConfigSearcher
types
	public string = Utilities`string;
	public config = Utilities`config;
instance variables
	private root : Parent;
	private nodeCount : nat;
	private restrictedInvalidSubsets : set of config;
	private validConfigs : set of set of string := {{}};
operations

-- ConfigSearcher Constructor
-- 1st arg: Root feature of the model to be tested
public ConfigSearcher: Feature ==> ConfigSearcher
	ConfigSearcher(r) == (root := r; nodeCount := root.nodeCount(); restrictedInvalidSubsets := root.invalidSubsets(); return self;);
					
-- Gets all valid configurations of the root associated with this ConfigSearcher
-- Return: Sequence of configs as all valid configurations
public getValidConfigs: () ==> set of set of string 
	getValidConfigs() == (
		searchFeatureTree(root, true, {});
		applyRestrictions();
		return validConfigs;
	);
				
-- Applies all restrictions related with the model to be tested
public applyRestrictions: () ==> ()
	applyRestrictions() ==
	(	
		validConfigs := 
   	{elem | elem in set validConfigs & not exists restriction in set restrictedInvalidSubsets & 
   	-- requirements
   	(rng restriction = {true, false} and 
   	(dom (restriction :> {true}) subset elem and not dom (restriction :> {false}) subset elem))
   	or
   	-- exclusions
   	(rng restriction = {true} and
   	(dom restriction subset elem)
   	)
   	};
	);
								
-- Searchs Feature tree in order to generate valid configurations
-- 1st arg: Feature to be searched
-- 2nd arg: Boolean indicated if the feature parent is a <xorParent> or an <orParent>
-- 3rd arg: Set of optional <orParent> or <xorParent>
public searchFeatureTree: (Feature | Parent) * bool * set of string ==> ()
	searchFeatureTree(feature, hasDefaultParent, optionalParents) == 
	(
	if hasDefaultParent then defaultParentConfigs(feature);
	checkOptionalParents(feature, optionalParents);
	if isofclass(Parent, feature) then (
		dcl newOptionalParents : set of string := optionalParents;
		if feature.isXorParent() then xorParentConfigs(feature)
		else if feature.isOrParent() then orParentConfigs(feature);
		if not feature.isMandatory() then newOptionalParents := newOptionalParents union {feature.getName()};
		for all subFeature in set feature.getSubFeatures() do
			searchFeatureTree(subFeature, feature.isDefaultParent(), newOptionalParents);
	);
	);

-- Generates valid configurations of a feature with a <defaultParent>
-- 1st arg: Feature related with valid configurations
public defaultParentConfigs: (Feature) ==> ()
	defaultParentConfigs(feature)  ==
	(
		dcl possibilities : set of set of string := {};
		if feature.isMandatory() then possibilities := {{feature.getName()}}
		else possibilities := {{feature.getName()},  {}};
		
		validConfigs := { validConfig union possibility | validConfig in set validConfigs, possibility in set possibilities};
	);

-- Generates valid configurations of a feature with a <xorParent>
-- 1st arg: Feature related with valid configurations
public xorParentConfigs: Parent ==> ()
	xorParentConfigs(parent) ==
	(
		dcl subFeatures : set of string := parent.getSubFeaturesNames();
		dcl configsWithoutParent : set of set of string := {validConfig | validConfig in set validConfigs & parent.getName() not in set validConfig};
		dcl configsWithParent : set of set of string := {validConfig | validConfig in set validConfigs & parent.getName() in set validConfig};
		
		validConfigs := {config union possibility | config in set configsWithParent, possibility in set {elem | elem in set power subFeatures & card elem = 1}} union configsWithoutParent;
	);

-- Generates valid configurations of a feature with an <orParent>
-- 1st arg: Feature related with valid configurations
public orParentConfigs: Parent ==> ()
	orParentConfigs(parent) ==
	(
		dcl subFeatures : set of string := parent.getSubFeaturesNames();
		dcl configsWithoutParent : set of set of string := {validConfig | validConfig in set validConfigs & parent.getName() not in set validConfig};
		dcl configsWithParent : set of set of string := {validConfig | validConfig in set validConfigs & parent.getName() in set validConfig};
		
		validConfigs := {config union possibility | config in set configsWithParent, possibility in set {elem | elem in set power subFeatures & elem <> {}}} union configsWithoutParent;
	);
				
-- Checks if there are optional parents so far, used to generate valid configurations with optional parents
-- 1st arg: Feature as the related feature
-- 2nd arg: Set of strings as optional parents identified so far
public checkOptionalParents: Feature * set of string ==> ()
	checkOptionalParents(feature, optionalParents) == 
	(	
		validConfigs := 
   	{elem | elem in set validConfigs & not exists optionalParent in set optionalParents & ((not optionalParent in set elem) and feature.getName() in set elem)};
	);
	
end ConfigSearcher