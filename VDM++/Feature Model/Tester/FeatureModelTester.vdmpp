class FeatureModelTester
types
			public config = Utilities`config;
instance variables
			generator : ConfigGenerator := new ConfigGenerator();
			eshopModel : Model := new Model();
			mobilePhoneModel: Model := new Model();
operations
			private assertTrue: bool ==> ()
                assertTrue(cond) == return
                pre cond;
      private assertFalse: bool ==> ()
                assertFalse(cond) == return
                pre not cond;
                
			private createEshopModel: () ==> ()
                createEshopModel() ==
                (
                			-- nodes declaration
                			dcl eshop : Parent := new Parent("e-shop");
											dcl catalogue : Feature := new Feature("catalogue");
											dcl payment : Parent := new Parent("payment");
											dcl security : Parent := new Parent("security");
											dcl search : Feature := new Feature("search");
											dcl bankTransfer : Feature := new Feature("bank transfer");
											dcl creditCard : Feature := new Feature("credit card");
											dcl high : Feature := new Feature("high");
											dcl standard : Feature := new Feature("standard");
											-- model creation
                			payment.setOrParent();
                			search.setOptional();
                			payment.setSubFeatures([bankTransfer, creditCard]);
                			security.setXorParent();
                			security.setSubFeatures([high, standard]);
                			creditCard.setRequirements([high]);
                			standard.setExclusions([search]);
                			eshop.setSubFeatures([catalogue, payment, security, search]);
                			eshopModel.setRoot(eshop);
                			-- assertions
                			assertTrue(eshop.subFeaturesLen() = 4);
                			assertTrue(payment.subFeaturesLen() = 2);
                			assertTrue(security.subFeaturesLen() = 2);
                			assertTrue(eshopModel.nodeCount() = 9);
                );
         	private createMobilePhoneModel: () ==> ()
                createMobilePhoneModel() ==
                (
                			-- nodes declaration
                			dcl mobilePhone : Parent := new Parent("mobile phone");
											dcl calls : Feature := new Feature("calls");
											dcl gps : Feature := new Feature("gps");
											dcl screen : Parent := new Parent("screen");
											dcl media : Parent := new Parent("media");
											dcl basic : Feature := new Feature("basic");
											dcl colour : Feature := new Feature("colour");
											dcl highResolution : Feature := new Feature("high resolution");
											dcl camera : Feature := new Feature("camera");
											dcl mp3 : Feature := new Feature("mp3");
											-- model creation
											gps.setOptional();
											media.setOptional();
											screen.setSubFeatures([basic, colour, highResolution]);
											screen.setXorParent();
											media.setSubFeatures([camera, mp3]);
											media.setOrParent();
											gps.setExclusions([basic]);
											camera.setRequirements([highResolution]);
											mobilePhone.setSubFeatures([media, calls, gps, screen]);
											mobilePhoneModel.setRoot(mobilePhone);
                			-- assertions
                			assertTrue(mobilePhone.subFeaturesLen() = 4);
                			assertTrue(screen.subFeaturesLen() = 3);
                			assertTrue(media.subFeaturesLen() = 2);
                			assertTrue(mobilePhoneModel.nodeCount() = 10);
                );
        private testEshopConfiguration:config ==> ()
                testEshopConfiguration(config) ==
                (
                		if config <> {|->} then assertTrue(eshopModel.isValidConfiguration(config));
                		generator.generateValidConfigs(eshopModel);
                );
        private testMobilePhoneConfiguration:config ==> ()
                testMobilePhoneConfiguration(config) ==
                (
                		if config <> {|->} then assertTrue(mobilePhoneModel.isValidConfiguration(config));
                		generator.generateValidConfigs(mobilePhoneModel);
                );
      	public static main: () ==> ()
                main() ==
                (	
                		dcl tester : FeatureModelTester := new FeatureModelTester();
                  	--tester.createEshopModel();
         						--tester.testEshopConfiguration({"e-shop" |-> true, "catalogue" |-> true,
                        						--"payment" |-> true, "security" |-> true, "search" |-> false,
                        						--"bank transfer" |-> true, "credit card" |-> false, 
                        						--"high" |-> true, "standard" |-> false});
                    tester.createMobilePhoneModel();
                    tester.testMobilePhoneConfiguration({|->});
                );
traces
			
end FeatureModelTester