class FeatureModelTester
types
			public config = Utilities`config;
			public parentType = Utilities`parentType;
instance variables
			generator : ConfigGenerator := new ConfigGenerator();                						
operations
			private assertTrue: bool ==> ()
                assertTrue(cond) == return
                pre cond;
      private assertFalse: bool ==> ()
                assertFalse(cond) == return
                pre not cond;
                
      -- tests parent type
      -- 1st arg: Parent to be tested
      -- 2nd arg: Type to be tested
      private testParentType: Parent * parentType ==> ()
      				testParentType(parent, type) == assertTrue(parent.getParentType() = type);
      				
      -- tests mandatory and optional features
      -- 1st arg: Feature to be tested
      -- 2nd arg: Mandatory status 
      private testMandatoryFeature: Feature * bool ==> ()
      					testMandatoryFeature(feature, isMandatory) == assertTrue(feature.isMandatory() = isMandatory);
      					
      -- tests parents sub features
      -- 1st arg: Parent to be tested
      -- 2nd arg: Expected sub features
      private testSubFeatures: Parent * seq of Feature ==> ()
      					testSubFeatures(parent, subFeatures) == assertTrue(parent.getSubFeatures() = subFeatures);
      					
      -- tests feature requirements
      -- 1st arg: Feature to be tested
      -- 2nd arg: Expected requirements
      private testRequirements: Feature * seq of Feature ==> ()
      					testRequirements(feature, requirements) == assertTrue(feature.getRequirements() = requirements);
      
      -- tests feature exclusions
      -- 1st arg: Feature to be tested
      -- 2nd arg: Expected exclusions
      private testExclusions: Feature * seq of Feature ==> ()
      					testExclusions(feature, exclusions) == assertTrue(feature.getExclusions() = exclusions); 
      									
      -- tests model features count
      -- 1st arg: Model to be tested
      -- 2nd arg: Expected features count
      private testModelFeaturesCount: Model * nat ==> ()
      					testModelFeaturesCount(model, count) == assertTrue(model.nodeCount() = count);
      					
      -- tests a model valid config
      -- 1st arg: Model to be tested
      -- 2nd arg: Valid config to be tested
      private validModelConfig: Model * config ==> ()
      					validModelConfig(model, config) == assertTrue(model.isValidConfiguration(config));
      					
      -- tests a model invalid config
      -- 1st arg: Model to be tested
      -- 2nd arg: Invalid config to be tested
      private invalidModelConfig: Model * config ==> ()
      					invalidModelConfig(model, config) == assertFalse(model.isValidConfiguration(config));
      
      -- tests the valid configs generation of a given model
      -- 1st arg: Model to be tested
      -- 2nd arg: Set of possible configs
      private testGeneratedValidConfigs: Model * set of config ==> ()
      				 testGeneratedValidConfigs(model, validSet) == 
      				 (
      				 dcl generatedSet : set of config := Utilities`seqToSet(model.generateValidConfigs());
      				 assertTrue(validSet union generatedSet = validSet);
      				 );
      					
      -- tests model root
      -- 1st arg: Model to be tested
      -- 2nd arg: Expected root
      private testModelRoot: Model * Parent ==> ()
      					testModelRoot(model, root) == assertTrue(model.getRoot() = root); 
      					
      
			private testEshopModel: () ==> ()
                testEshopModel() ==
                (
                			-- nodes declaration
                			dcl eshop : Parent := new Parent("e-shop");
											dcl catalogue : Feature := new Feature("catalogue");
											dcl payment : Parent := new Parent("payment");
											dcl security : Parent := new Parent("security");
											dcl search : Feature := new Feature("search");
											dcl bankTransfer : Feature := new Feature("bank transfer");
											dcl creditCard : Feature := new Feature("credit card");
											dcl high : Feature := new Feature("high");
											dcl standard : Feature := new Feature("standard");
											dcl eshopModel : Model := new Model();
											
											-- Parent type tests
											-- description: Since the default operation is to set the parent as a <defaultParent>, eshop should have the <defaultParent> type
											-- note: Only these 3 Features are Parents (a subclass of Feature)
                			payment.setParentType(<orParent>);
                			security.setParentType(<xorParent>);
                			
                			testParentType(payment, <orParent>);
                			testParentType(security, <xorParent>);
                			testParentType(eshop, <defaultParent>);
                			
                			-- Sub features tests
                			-- description: Each parent should have the respective features as subFeatures
                			payment.setSubFeatures([bankTransfer, creditCard]);
                			security.setSubFeatures([high, standard]);
                			eshop.setSubFeatures([catalogue, payment, security, search]);
                			
                			testSubFeatures(payment, [bankTransfer, creditCard]);
                			testSubFeatures(security, [high, standard]);
                			testSubFeatures(eshop, [catalogue, payment, security, search]);
                			
                			-- Mandatory and optional features tests 
                			-- description: The default operation is to set any feature as mandatory, the "search" and features with xor and or parents should be optional
                			search.setMandatory(false);
                			
                			testMandatoryFeature(eshop, true);
                			testMandatoryFeature(catalogue, true);
                			testMandatoryFeature(payment, true);
                			testMandatoryFeature(security, true);
                			testMandatoryFeature(search, false);
                			testMandatoryFeature(bankTransfer, false);
                			testMandatoryFeature(creditCard, false);
                			testMandatoryFeature(high, false);
                			testMandatoryFeature(standard, false);
                			
                			-- Requirements tests
                			-- description: By default a Feature doesn't have requirements, so only the "creditCard" should have the "high" feature as requirement
                			creditCard.setRequirements([high]);
                			
                			testRequirements(eshop, []);
                			testRequirements(catalogue, []);
                			testRequirements(payment, []);
                			testRequirements(security, []);
                			testRequirements(search, []);
                			testRequirements(bankTransfer, []);
                			testRequirements(creditCard, [high]);
                			testRequirements(high, []);
                			testRequirements(standard, []);
                			
                			-- Exclusions tests
                			-- description: By default a Feature doesn't have exclusions
                					
                			testExclusions(eshop, []);
                			testExclusions(catalogue, []);
                			testExclusions(payment, []);
                			testExclusions(security, []);
                			testExclusions(search, []);
                			testExclusions(bankTransfer, []);
                			testExclusions(creditCard, []);
                			testExclusions(high, []);
                			testExclusions(standard, []);
                			
                			-- Model tests
                			-- description: By default a Feature doesn't have requirements, so only the "creditCard" should have the "high" feature as requirement
                			
                			eshopModel.setRoot(eshop);

                			testModelRoot(eshopModel, eshop);
                			testModelFeaturesCount(eshopModel, 9);
                			validModelConfig(eshopModel, {"e-shop" |-> true, "catalogue" |-> true,
                        						"payment" |-> true, "bank transfer" |-> true, "credit card" |-> false, 
                        						"security" |-> true, "high" |-> true, "standard" |-> false, "search" |-> false });
                      invalidModelConfig(eshopModel, {"e-shop" |-> true, "catalogue" |-> true,
                        						"payment" |-> true, "bank transfer" |-> true, "credit card" |-> false, 
                        						"security" |-> true, "high" |-> true, "standard" |-> true, "search" |-> false });
                			testGeneratedValidConfigs(eshopModel, Utilities`eshopValidConfigs());
                );
         	private testMobilePhoneModel: () ==> ()
                testMobilePhoneModel() ==
                (
                			-- nodes declaration
                			
                			dcl mobilePhone : Parent := new Parent("mobile phone");
											dcl calls : Feature := new Feature("calls");
											dcl gps : Feature := new Feature("gps");
											dcl screen : Parent := new Parent("screen");
											dcl media : Parent := new Parent("media");
											dcl basic : Feature := new Feature("basic");
											dcl colour : Feature := new Feature("colour");
											dcl highResolution : Feature := new Feature("high resolution");
											dcl camera : Feature := new Feature("camera");
											dcl mp3 : Feature := new Feature("mp3");
											dcl mobilePhoneModel: Model := new Model();  
	
											-- Parent type tests
											
											media.setParentType(<orParent>);
											screen.setParentType(<xorParent>);
											
											testParentType(media, <orParent>);
                			testParentType(screen, <xorParent>);
                			testParentType(mobilePhone, <defaultParent>);
                			
                			-- Sub features tests
                			
                			screen.setSubFeatures([basic, colour, highResolution]);
											media.setSubFeatures([camera, mp3]);
											mobilePhone.setSubFeatures([media, calls, gps, screen]);
											
											testSubFeatures(screen, [basic, colour, highResolution]);
                			testSubFeatures(media, [camera, mp3]);
                			testSubFeatures(mobilePhone, [media, calls, gps, screen]);
											
											-- Mandatory and optional features tests
											-- Note: In order to build strong test cases we're gonna consider the "screen" feature as optional
											
											gps.setMandatory(false);
											media.setMandatory(false);
											screen.setMandatory(false);
											
											testMandatoryFeature(mobilePhone, true);
                			testMandatoryFeature(calls, true);
                			testMandatoryFeature(gps, false);
                			testMandatoryFeature(screen, false);
                			testMandatoryFeature(media, false);
                			testMandatoryFeature(basic, false);
                			testMandatoryFeature(colour, false);
                			testMandatoryFeature(highResolution, false);
                			testMandatoryFeature(camera, false);
                			testMandatoryFeature(mp3, false);
											
											-- Requirements tests
											
											camera.setRequirements([highResolution]);
											
											testRequirements(mobilePhone, []);
                			testRequirements(calls, []);
                			testRequirements(gps, []);
                			testRequirements(screen, []);
                			testRequirements(media, []);
                			testRequirements(basic, []);
                			testRequirements(colour, []);
                			testRequirements(highResolution, []);
                			testRequirements(camera, [highResolution]);
                			testRequirements(mp3, []);
											
											-- Exclusions tests
											
											gps.setExclusions([basic]);
											
											testExclusions(mobilePhone, []);
                			testExclusions(calls, []);
                			testExclusions(gps, [basic]);
                			testExclusions(screen, []);
                			testExclusions(media, []);
                			testExclusions(basic, []);
                			testExclusions(colour, []);
                			testExclusions(highResolution, []);
                			testExclusions(camera, []);
                			testExclusions(mp3, []);
                			
                			-- Model tests
                			
											mobilePhoneModel.setRoot(mobilePhone);
                			
                			testModelRoot(mobilePhoneModel, mobilePhone);
                			testModelFeaturesCount(mobilePhoneModel, 10);
                			validModelConfig(mobilePhoneModel, {"mobile phone" |-> true, "calls" |-> true, "gps" |-> true,
                     															"screen" |-> true, "basic" |-> false, "colour" |-> false, "high resolution" |-> true,
                     															"media" |-> true, "camera" |-> true, "mp3" |-> true});
                      invalidModelConfig(mobilePhoneModel, {"mobile phone" |-> true, "calls" |-> false, "gps" |-> true,
                     															"screen" |-> true, "basic" |-> false, "colour" |-> false, "high resolution" |-> true,
                     															"media" |-> true, "camera" |-> true, "mp3" |-> true});
                			testGeneratedValidConfigs(mobilePhoneModel, Utilities`mobilePhoneValidConfigs());
                );
      	public static main: () ==> ()
                main() ==
                (	
                		dcl tester : FeatureModelTester := new FeatureModelTester();
                  	tester.testEshopModel();
                  	tester.testMobilePhoneModel();
                );
end FeatureModelTester